  
  1.1.6.	Создание таблицы
CREATE TABLE book (book_id INT PRIMARY KEY AUTO_INCREMENT,
                   title VARCHAR(50),
                   author VARCHAR(30),
                   price DECIMAL(8,2),
                   amount INT)
                   
  1.1.7.	Вставка записи в таблицу
INSERT INTO book(title, author, price, amount) VALUES ('Мастер и Маргарита', 'Булгаков М.А.', 670.99, 3);
SELECT * FROM book;
Affected rows: 1
Query result:
+---------+--------------------+---------------+--------+--------+
| book_id | title              | author        | price  | amount |
+---------+--------------------+---------------+--------+--------+
| 1       | Мастер и Маргарита | Булгаков М.А. | 670.99 | 3      |
+---------+--------------------+---------------+--------+--------+
Affected rows: 1

  1.1.8. Занесите три последние записи в таблицуbook,  первая запись уже добавлена на предыдущем шаге:
INSERT INTO book (book_id, title, author, price, amount) 
VALUES (2, "Белая гвардия", "Булгаков М.А.", 540.50, 5);
INSERT INTO book (book_id, title, author, price, amount) 
VALUES (3, "Идиот", "Достоевский Ф.М.", 460.00, 10);
INSERT INTO book (book_id, title, author, price, amount) 
VALUES (4, "Братья Карамазовы", "Достоевский Ф.М.",799.01, 2);

Affected rows: 1
Affected rows: 1
Affected rows: 1
Query result:
+---------+--------------------+------------------+--------+--------+
| book_id | title              | author           | price  | amount |
+---------+--------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия      | Булгаков М.А.    | 540.50 | 5      |
| 3       | Идиот              | Достоевский Ф.М. | 460.00 | 10     |
| 4       | Братья Карамазовы  | Достоевский Ф.М. | 799.01 | 2      |
+---------+--------------------+------------------+--------+--------+

  1.2.2. Выборка всех данных из таблицы
SELECT * FROM book;
Query result:
+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
| 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
+---------+-----------------------+------------------+--------+--------+
Affected rows: 5

  1.2.3. Выборка отдельных столбцов
SELECT author, title, price FROM book;
Query result:
+------------------+-----------------------+--------+
| author           | title                 | price  |
+------------------+-----------------------+--------+
| Булгаков М.А.    | Мастер и Маргарита    | 670.99 |
| Булгаков М.А.    | Белая гвардия         | 540.50 |
| Достоевский Ф.М. | Идиот                 | 460.00 |
| Достоевский Ф.М. | Братья Карамазовы     | 799.01 |
| Есенин С.А.      | Стихотворения и поэмы | 650.00 |
+------------------+-----------------------+--------+
Affected rows: 5

  1.2.4. Выборка отдельных столбцов и присвоение им новых имен
SELECT title AS Название, author AS Автор FROM book;
Query result:
+-----------------------+------------------+
| Название              | Автор            |
+-----------------------+------------------+
| Мастер и Маргарита    | Булгаков М.А.    |
| Белая гвардия         | Булгаков М.А.    |
| Идиот                 | Достоевский Ф.М. |
| Братья Карамазовы     | Достоевский Ф.М. |
| Стихотворения и поэмы | Есенин С.А.      |
+-----------------------+------------------+
Affected rows: 5

  1.2.5. Выборка данных с созданием вычисляемого столбца
SELECT title, amount, amount * 1.65 as pack
FROM book;
Query result:
+-----------------------+--------+-------+
| title                 | amount | pack  |
+-----------------------+--------+-------+
| Мастер и Маргарита    | 3      | 4.95  |
| Белая гвардия         | 5      | 8.25  |
| Идиот                 | 10     | 16.50 |
| Братья Карамазовы     | 2      | 3.30  |
| Стихотворения и поэмы | 15     | 24.75 |
+-----------------------+--------+-------+
Affected rows: 5

  1.2.6. Выборка данных, вычисляемые столбцы, математические функции
SELECT title, author, amount, round(price*0.7,2) AS new_price
FROM book;
Query result:
+-----------------------+------------------+--------+-----------+
| title                 | author           | amount | new_price |
+-----------------------+------------------+--------+-----------+
| Мастер и Маргарита    | Булгаков М.А.    | 3      | 469.69    |
| Белая гвардия         | Булгаков М.А.    | 5      | 378.35    |
| Идиот                 | Достоевский Ф.М. | 10     | 322.00    |
| Братья Карамазовы     | Достоевский Ф.М. | 2      | 559.31    |
| Стихотворения и поэмы | Есенин С.А.      | 15     | 455.00    |
+-----------------------+------------------+--------+-----------+
Affected rows: 5

  1.2.7. Выборка данных, вычисляемые столбцы, логические функции
SELECT author, title,
    round(IF (author='Булгаков М.А.', price*1.1, 
              IF (author='Есенин С.А.', price*1.05, price)), 2) AS new_price
FROM book;
Query result:
+------------------+-----------------------+-----------+
| author           | title                 | new_price |
+------------------+-----------------------+-----------+
| Булгаков М.А.    | Мастер и Маргарита    | 738.09    |
| Булгаков М.А.    | Белая гвардия         | 594.55    |
| Достоевский Ф.М. | Идиот                 | 460.00    |
| Достоевский Ф.М. | Братья Карамазовы     | 799.01    |
| Есенин С.А.      | Стихотворения и поэмы | 682.50    |
+------------------+-----------------------+-----------+
Affected rows: 5

  1.2.8. Выборка данных по условию
SELECT author, title, price
FROM book
WHERE amount <10
Query result:
+------------------+--------------------+--------+
| author           | title              | price  |
+------------------+--------------------+--------+
| Булгаков М.А.    | Мастер и Маргарита | 670.99 |
| Булгаков М.А.    | Белая гвардия      | 540.50 |
| Достоевский Ф.М. | Братья Карамазовы  | 799.01 |
+------------------+--------------------+--------+
Affected rows: 3

  1.2.9. Выборка данных, логические операции
SELECT title, author, price, amount
FROM book
WHERE (price<500 OR price>600) AND price*amount>5000
Query result:
+-----------------------+-------------+--------+--------+
| title                 | author      | price  | amount |
+-----------------------+-------------+--------+--------+
| Стихотворения и поэмы | Есенин С.А. | 650.00 | 15     |
+-----------------------+-------------+--------+--------+
Affected rows: 1

  1.2.10. Выборка данных, операторы BETWEEN, IN
SELECT title, author
FROM book
WHERE (price BETWEEN 540.5 AND 800) AND amount IN (2,3,5,7) 
Query result:
+--------------------+------------------+
| title              | author           |
+--------------------+------------------+
| Мастер и Маргарита | Булгаков М.А.    |
| Белая гвардия      | Булгаков М.А.    |
| Братья Карамазовы  | Достоевский Ф.М. |
+--------------------+------------------+
Affected rows: 3

  1.2.11. Выборка данных, оператор LIKE
SELECT title, author
FROM book
WHERE title LIKE '% %' 
  AND author LIKE '%С.%'
Query result:
+-----------------------+-------------+
| title                 | author      |
+-----------------------+-------------+
| Стихотворения и поэмы | Есенин С.А. |
+-----------------------+-------------+
Affected rows: 1

  1.2.12. Выборка данных с сортировкой
SELECT author, title
FROM book
WHERE amount BETWEEN 2 AND 14
ORDER BY author DESC, title ASC
Query result:
+------------------+--------------------+
| author           | title              |
+------------------+--------------------+
| Достоевский Ф.М. | Братья Карамазовы  |
| Достоевский Ф.М. | Идиот              |
| Булгаков М.А.    | Белая гвардия      |
| Булгаков М.А.    | Мастер и Маргарита |
+------------------+--------------------+
Affected rows: 4

  1.2.13. Свободное задание
SELECT title, author AS Автор, price*0.18 as TAX, price, amount
FROM book
WHERE (title LIKE "% %" AND author LIKE '% М.%') AND price>600
ORDER BY author DESC
Query result:
+--------------------+---------------+----------+--------+--------+
| title              | Автор         | TAX      | price  | amount |
+--------------------+---------------+----------+--------+--------+
| Мастер и Маргарита | Булгаков М.А. | 120.7782 | 670.99 | 3      |
+--------------------+---------------+----------+--------+--------+
Affected rows: 1

  1.3.2. Выбор различных элементов столбца
SELECT DISTINCT amount 
FROM book
Query result:
+--------+
| amount |
+--------+
| 3      |
| 5      |
| 10     |
| 15     |
+--------+
Affected rows: 4

  1.3.3. Выборка данных, групповые функции SUM и COUNT
SELECT author AS Автор, COUNT(author) AS Различных_книг, SUM(amount) AS Количество_экземпляров
FROM book
GROUP BY author
Query result:
+------------------+----------------+------------------------+
| Автор            | Различных_книг | Количество_экземпляров |
+------------------+----------------+------------------------+
| Булгаков М.А.    | 2              | 8                      |
| Достоевский Ф.М. | 3              | 23                     |
| Есенин С.А.      | 1              | 15                     |
+------------------+----------------+------------------------+
Affected rows: 3

  1.3.4. Выборка данных, групповые функции MIN, MAX и AVG
SELECT author, 
        min(price) AS Минимальная_цена, 
        max(price) AS Максимальная_цена, 
        avg(price) AS Средняя_цена
FROM book
group by author;
Query result:
+------------------+------------------+-------------------+--------------+
| author           | Минимальная_цена | Максимальная_цена | Средняя_цена |
+------------------+------------------+-------------------+--------------+
| Булгаков М.А.    | 540.50           | 670.99            | 605.745000   |
| Достоевский Ф.М. | 460.00           | 799.01            | 579.836667   |
| Есенин С.А.      | 650.00           | 650.00            | 650.000000   |
+------------------+------------------+-------------------+--------------+
Affected rows: 3

  1.3.5. Выборка данных c вычислением, групповые функции
SELECT author, sum(price*amount) AS Стоимость, 
                round(sum(price*amount)*0.18/(1+0.18),2) AS НДС,
                round(sum(price*amount)/(1+0.18),2) AS Стоимость_без_НДС
FROM book
GROUP BY author
Query result:
+------------------+-----------+---------+-------------------+
| author           | Стоимость | НДС     | Стоимость_без_НДС |
+------------------+-----------+---------+-------------------+
| Булгаков М.А.    | 4715.47   | 719.31  | 3996.16           |
| Достоевский Ф.М. | 11802.03  | 1800.31 | 10001.72          |
| Есенин С.А.      | 9750.00   | 1487.29 | 8262.71           |
+------------------+-----------+---------+-------------------+
Affected rows: 3

  1.3.6. Вычисления по таблице целиком
SELECT min(price) AS Минимальная_цена,
       max(price) AS Максимальная_цена,
       round(AVG(price), 2) AS Средняя_цена
FROM book;
Query result:
+------------------+-------------------+--------------+
| Минимальная_цена | Максимальная_цена | Средняя_цена |
+------------------+-------------------+--------------+
| 460.00           | 799.01            | 600.17       |
+------------------+-------------------+--------------+
Affected rows: 1

  1.3.7. Выборка данных по условию, групповые функции
SELECT round(AVG(price), 2) AS Средняя_цена, round(SUM(amount*price), 2) AS Стоимость
FROM book
WHERE amount between 5 and 14
Query result:
+--------------+-----------+
| Средняя_цена | Стоимость |
+--------------+-----------+
| 493.67       | 12107.50  |
+--------------+-----------+
Affected rows: 1

  1.3.8. Выборка данных по условию, групповые функции, WHERE и HAVING
SELECT author, SUM(price*amount) AS Стоимость
FROM book
WHERE title<>'Идиот' AND title<>'Белая гвардия'
GROUP BY author
HAVING SUM(price*amount)>5000
ORDER BY Стоимость DESC
Query result:
+------------------+-----------+
| author           | Стоимость |
+------------------+-----------+
| Есенин С.А.      | 9750.00   |
| Достоевский Ф.М. | 7202.03   |
+------------------+-----------+
Affected rows: 2

  1.3.9. Свободное задание
SELECT author, MAX(price) as max_price, round(SUM(price*amount), 2) AS sum_value
FROM book
GROUP BY author
HAVING max(price)>650
ORDER BY max_price DESC
Query result:
+------------------+-----------+-----------+
| author           | max_price | sum_value |
+------------------+-----------+-----------+
| Достоевский Ф.М. | 799.01    | 11802.03  |
| Булгаков М.А.    | 670.99    | 4715.47   |
+------------------+-----------+-----------+
Affected rows: 2

  1.4.2. Вложенный запрос, возвращающий одно значение
SELECT author, title, price
FROM book
WHERE PRICE<=(SELECT AVG(price) FROM book)
ORDER BY price DESC
Query result:
+------------------+---------------+--------+
| author           | title         | price  |
+------------------+---------------+--------+
| Булгаков М.А.    | Белая гвардия | 540.50 |
| Достоевский Ф.М. | Игрок         | 480.50 |
| Достоевский Ф.М. | Идиот         | 460.00 |
+------------------+---------------+--------+
Affected rows: 3

  1.4.3. Использование вложенного запроса в выражении
SELECT author, title, price
FROM book
WHERE price-(SELECT MIN(price) FROM book)<150
ORDER BY price
Query result:
+------------------+---------------+--------+
| author           | title         | price  |
+------------------+---------------+--------+
| Достоевский Ф.М. | Идиот         | 460.00 |
| Достоевский Ф.М. | Игрок         | 480.50 |
| Булгаков М.А.    | Белая гвардия | 540.50 |
+------------------+---------------+--------+
Affected rows: 3

  1.4.4. Вложенный запрос, оператор IN
SELECT author, title, amount
FROM book
WHERE amount IN (SELECT amount
                 FROM book
                 GROUP BY amount
                 HAVING count(amount)=1)
Query result:
+---------------+-----------------------+--------+
| author        | title                 | amount |
+---------------+-----------------------+--------+
| Булгаков М.А. | Белая гвардия         | 5      |
| Есенин С.А.   | Стихотворения и поэмы | 15     |
+---------------+-----------------------+--------+
Affected rows: 2

  1.4.5. Вложенный запрос, операторы ANY и ALL
SELECT author, title, price FROM book
WHERE author in
(SELECT author FROM book
            GROUP BY author
            HAVING AVG(price)> (SELECT AVG(price) FROM book))
Query result:
+---------------+-----------------------+--------+
| author        | title                 | price  |
+---------------+-----------------------+--------+
| Булгаков М.А. | Мастер и Маргарита    | 670.99 |
| Булгаков М.А. | Белая гвардия         | 540.50 |
| Есенин С.А.   | Стихотворения и поэмы | 650.00 |
+---------------+-----------------------+--------+
Affected rows: 3

  1.4.6. Вложенный запрос после SELECT
SELECT title, author, amount, ((SELECT MAX(amount) FROM book)-amount) AS Заказ
FROM book
WHERE amount <> (SELECT MAX(amount) FROM book)
Query result:
+--------------------+------------------+--------+-------+
| title              | author           | amount | Заказ |
+--------------------+------------------+--------+-------+
| Мастер и Маргарита | Булгаков М.А.    | 3      | 12    |
| Белая гвардия      | Булгаков М.А.    | 5      | 10    |
| Идиот              | Достоевский Ф.М. | 10     | 5     |
| Братья Карамазовы  | Достоевский Ф.М. | 3      | 12    |
| Игрок              | Достоевский Ф.М. | 10     | 5     |
+--------------------+------------------+--------+-------+
Affected rows: 5

  1.4.7. Свободное задание
SELECT title, round((SELECT AVG(amount) FROM book),0)-amount AS Заказ
FROM book
WHERE amount-(SELECT AVG(amount) FROM book)<0
ORDER BY title
Query result:
+--------------------+-------+
| title              | Заказ |
+--------------------+-------+
| Белая гвардия      | 3     |
| Братья Карамазовы  | 5     |
| Мастер и Маргарита | 5     |
+--------------------+-------+
Affected rows: 3

  1.5.2. Создание пустой таблицы
CREATE TABLE supply(supply_id INT PRIMARY KEY AUTO_INCREMENT,
              title VARCHAR(50),
              author VARCHAR(30),
              price DECIMAL(8,2),
              amount INT)
              
  1.5.3. Добавление записей в таблицу
INSERT INTO supply (title, author, price, amount) VALUES ('Лирика', 'Пастернак Б.Л.', 518.99, 2);
INSERT INTO supply (title, author, price, amount) VALUES ('Черный человек', 'Есенин С.А.', 570.20, 6);
INSERT INTO supply (title, author, price, amount) VALUES ('Белая гвардия', 'Булгаков М.А.', 540.50, 7);
INSERT INTO supply (title, author, price, amount) VALUES ('Идиот', 'Достоевский Ф.М.', 360.80, 3);
SELECT * FROM supply
Query result:
+-----------+----------------+------------------+--------+--------+
| supply_id | title          | author           | price  | amount |
+-----------+----------------+------------------+--------+--------+
| 1         | Лирика         | Пастернак Б.Л.   | 518.99 | 2      |
| 2         | Черный человек | Есенин С.А.      | 570.20 | 6      |
| 3         | Белая гвардия  | Булгаков М.А.    | 540.50 | 7      |
| 4         | Идиот          | Достоевский Ф.М. | 360.80 | 3      |
+-----------+----------------+------------------+--------+--------+
Affected rows: 4

  1.5.4. Добавление записей из другой таблицы
INSERT INTO book(title, author, price, amount)
    SELECT title, author, price, amount
    FROM supply
    WHERE author<>'Булгаков М.А.' AND author<>'Достоевский Ф.М.';
SELECT * FROM book;
Query result:
+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
| 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
| 6       | Лирика                | Пастернак Б.Л.   | 518.99 | 2      |
| 7       | Черный человек        | Есенин С.А.      | 570.20 | 6      |
+---------+-----------------------+------------------+--------+--------+
Affected rows: 7

  1.5.5. Добавление записей, вложенные запросы
INSERT INTO book(title, author, price, amount)
       SELECT title, author, price, amount
       FROM supply
       WHERE author NOT IN (SELECT author FROM book);
SELECT * FROM book;
Query result:
+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      |
| 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
| 6       | Лирика                | Пастернак Б.Л.   | 518.99 | 2      |
+---------+-----------------------+------------------+--------+--------+
Affected rows: 6

  1.5.6. Запросы на обновление
UPDATE book SET price=0.9*price
WHERE amount BETWEEN 5 AND 10;
SELECT * FROM book;
Query result:
+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 486.45 | 5      |
| 3       | Идиот                 | Достоевский Ф.М. | 414.00 | 10     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
+---------+-----------------------+------------------+--------+--------+
Affected rows: 5

  1.5.7. Запросы на обновление нескольких столбцов
UPDATE book SET buy=amount
WHERE buy>amount;
select * FROM book
Query result:
+---------+-----------------------+------------------+--------+--------+-----+
| book_id | title                 | author           | price  | amount | buy |
+---------+-----------------------+------------------+--------+--------+-----+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      | 0   |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 5      | 3   |
| 3       | Идиот                 | Достоевский Ф.М. | 460.00 | 10     | 8   |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      | 0   |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     | 15  |
+---------+-----------------------+------------------+--------+--------+-----+
Affected rows: 5

  1.5.8. Запросы на обновление, несколько таблиц
UPDATE book, supply SET book.amount=book.amount+supply.amount,
                        book.price = (book.price+supply.price)/2
WHERE book.author = supply.author AND book.title=supply.title;
SELECT * FROM book;
Query result:
+---------+-----------------------+------------------+--------+--------+
| book_id | title                 | author           | price  | amount |
+---------+-----------------------+------------------+--------+--------+
| 1       | Мастер и Маргарита    | Булгаков М.А.    | 670.99 | 3      |
| 2       | Белая гвардия         | Булгаков М.А.    | 540.50 | 12     |
| 3       | Идиот                 | Достоевский Ф.М. | 410.40 | 13     |
| 4       | Братья Карамазовы     | Достоевский Ф.М. | 799.01 | 2      |
| 5       | Стихотворения и поэмы | Есенин С.А.      | 650.00 | 15     |
+---------+-----------------------+------------------+--------+--------+
Affected rows: 5

  1.5.9. Запросы на удаление
DELETE FROM supply
WHERE supply.title IN (SELECT book.title FROM book
                      WHERE supply.price=book.price);

SELECT * FROM supply
Query result:
+-----------+--------------------------+------------------+--------+--------+
| supply_id | title                    | author           | price  | amount |
+-----------+--------------------------+------------------+--------+--------+
| 1         | Лирика                   | Пастернак Б.Л.   | 518.99 | 2      |
| 2         | Черный человек           | Есенин С.А.      | 570.20 | 6      |
| 4         | Идиот                    | Достоевский Ф.М. | 360.80 | 3      |
| 5         | Преступление и наказание | Достоевский Ф.М. | 670.99 | 5      |
+-----------+--------------------------+------------------+--------+--------+
Affected rows: 4

  1.5.10. Запросы на создание таблицы
CREATE TABLE ordering AS
SELECT author, title, round((SELECT AVG(amount) FROM book),0) AS amount FROM book 
WHERE amount<(SELECT AVG(amount) FROM book);
SELECT * FROM ordering
Query result:
+------------------+--------------------+--------+
| author           | title              | amount |
+------------------+--------------------+--------+
| Булгаков М.А.    | Мастер и Маргарита | 7      |
| Булгаков М.А.    | Белая гвардия      | 7      |
| Достоевский Ф.М. | Братья Карамазовы  | 7      |
+------------------+--------------------+--------+
Affected rows: 3

  1.5.11. Свободное задание
SELECT MAX(amount) FROM book;
SELECT amount FROM book
ORDER BY amount DESC
Query result:
+-------------+
| MAX(amount) |
+-------------+
| 15          |
+-------------+
Affected rows: 1
Query result:
+--------+
| amount |
+--------+
| 15     |
| 10     |
| 5      |
| 3      |
| 2      |
+--------+
Affected rows: 5

  1.6.2. Вывести из таблицы trip информацию о командировках...
SELECT name, city, per_diem, date_first, date_last FROM trip
WHERE name LIKE '%а %'
ORDER BY date_last DESC
Query result:
+---------------+-----------------+----------+------------+------------+
| name          | city            | per_diem | date_first | date_last  |
+---------------+-----------------+----------+------------+------------+
| Абрамова К.А. | Владивосток     | 450.00   | 2020-07-02 | 2020-07-13 |
| Федорова А.Ю. | Томск           | 450.00   | 2020-06-20 | 2020-06-26 |
| Абрамова К.А. | Санкт-Петербург | 700.00   | 2020-05-28 | 2020-06-04 |
| Федорова А.Ю. | Новосибирск     | 450.00   | 2020-05-25 | 2020-06-04 |
| Абрамова К.А. | Москва          | 700.00   | 2020-04-06 | 2020-04-14 |
| Абрамова К.А. | Москва          | 700.00   | 2020-02-23 | 2020-03-01 |
| Абрамова К.А. | Владивосток     | 450.00   | 2020-01-14 | 2020-01-27 |
+---------------+-----------------+----------+------------+------------+
Affected rows: 7

  1.6.3. Вывести в алфавитном порядке фамилии, имена и отчества тех сотрудников...
SELECT DISTINCT name FROM trip
WHERE city='Москва'
ORDER BY name
Query result:
+---------------+
| name          |
+---------------+
| Абрамова К.А. |
| Баранов П.Е.  |
| Колесов С.П.  |
| Лебедев Т.К.  |
| Семенов И.В.  |
+---------------+
Affected rows: 5

  1.6.4. Для каждого города посчитать, сколько раз сотрудники в нем были...
SELECT city, count(city) AS Количество
FROM trip
GROUP BY city
ORDER BY city
Query result:
+-----------------+------------+
| city            | Количество |
+-----------------+------------+
| Владивосток     | 3          |
| Воронеж         | 1          |
| Москва          | 7          |
| Новосибирск     | 4          |
| Санкт-Петербург | 3          |
| Томск           | 2          |
+-----------------+------------+
Affected rows: 6

  1.6.5. Вывести два города, в которых чаще всего были в командировках сотрудники...
SELECT city, count(city) AS Количество
FROM trip
GROUP BY city
ORDER BY Количество DESC LIMIT 2
Query result:
+-------------+------------+
| city        | Количество |
+-------------+------------+
| Москва      | 7          |
| Новосибирск | 4          |
+-------------+------------+
Affected rows: 2

  1.6.6. Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга...
SELECT DISTINCT name, city, DATEDIFF(date_last, date_first)+1 AS Длительность FROM trip
WHERE city<>'Москва'AND city<>'Санкт-Петербург'
ORDER BY Длительность DESC, city DESC
Query result:
+---------------+-------------+--------------+
| name          | city        | Длительность |
+---------------+-------------+--------------+
| Ильиных Г.Р.  | Владивосток | 22           |
| Баранов П.Е.  | Новосибирск | 17           |
| Колесов С.П.  | Новосибирск | 15           |
| Абрамова К.А. | Владивосток | 14           |
| Лебедев Т.К.  | Томск       | 12           |
| Абрамова К.А. | Владивосток | 12           |
| Федорова А.Ю. | Новосибирск | 11           |
| Колесов С.П.  | Новосибирск | 10           |
| Федорова А.Ю. | Томск       | 7            |
| Баранов П.Е.  | Воронеж     | 7            |
+---------------+-------------+--------------+
Affected rows: 10

  1.6.7. Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени
SELECT name, city, date_first, date_last FROM trip
WHERE DATEDIFF(date_last, date_first)=(SELECT MIN(DATEDIFF(date_last, date_first)) FROM trip)
Query result:
+--------------+-----------------+------------+------------+
| name         | city            | date_first | date_last  |
+--------------+-----------------+------------+------------+
| Семенов И.В. | Санкт-Петербург | 2020-06-01 | 2020-06-03 |
+--------------+-----------------+------------+------------+
Affected rows: 1

  1.6.8. Вывести информацию о командировках, начало и конец которых относятся к одному месяцу...
SELECT name, city, date_first, date_last FROM trip
WHERE MONTH(date_first)=MONTH(date_last)
ORDER BY city, name
Query result:
+---------------+-----------------+------------+------------+
| name          | city            | date_first | date_last  |
+---------------+-----------------+------------+------------+
| Абрамова К.А. | Владивосток     | 2020-01-14 | 2020-01-27 |
| Абрамова К.А. | Владивосток     | 2020-07-02 | 2020-07-13 |
| Баранов П.Е.  | Воронеж         | 2020-07-19 | 2020-07-25 |
| Абрамова К.А. | Москва          | 2020-04-06 | 2020-04-14 |
| Баранов П.Е.  | Москва          | 2020-01-12 | 2020-01-17 |
| Баранов П.Е.  | Москва          | 2020-02-14 | 2020-02-22 |
| Колесов С.П.  | Москва          | 2020-02-01 | 2020-02-06 |
| Лебедев Т.К.  | Москва          | 2020-03-03 | 2020-03-06 |
| Семенов И.В.  | Москва          | 2020-01-23 | 2020-01-31 |
| Колесов С.П.  | Новосибирск     | 2020-06-03 | 2020-06-12 |
| Семенов И.В.  | Санкт-Петербург | 2020-06-01 | 2020-06-03 |
| Лебедев Т.К.  | Томск           | 2020-05-20 | 2020-05-31 |
| Федорова А.Ю. | Томск           | 2020-06-20 | 2020-06-26 |
+---------------+-----------------+------------+------------+
Affected rows: 13

  1.6.9. Вывести название месяца и количество командировок для каждого месяца...
SELECT MONTHNAME(date_first) AS Месяц, count(date_first) AS Количество
FROM trip
GROUP BY Месяц
ORDER BY Количество DESC, Месяц
Query result:
+----------+------------+
| Месяц    | Количество |
+----------+------------+
| February | 4          |
| January  | 4          |
| June     | 3          |
| May      | 3          |
| April    | 2          |
| July     | 2          |
| March    | 2          |
+----------+------------+
Affected rows: 7

  1.6.10. Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок...
SELECT name, city, date_first, per_diem*(DATEDIFF(date_last, date_first)+1) AS Сумма FROM trip
WHERE MONTH(date_first)=2 OR MONTH(date_first)=3
ORDER BY name, Сумма DESC
Query result:
+---------------+-----------------+------------+---------+
| name          | city            | date_first | Сумма   |
+---------------+-----------------+------------+---------+
| Абрамова К.А. | Москва          | 2020-02-23 | 5600.00 |
| Баранов П.Е.  | Москва          | 2020-02-14 | 6300.00 |
| Колесов С.П.  | Новосибирск     | 2020-02-27 | 6750.00 |
| Колесов С.П.  | Москва          | 2020-02-01 | 4200.00 |
| Лебедев Т.К.  | Москва          | 2020-03-03 | 2800.00 |
| Семенов И.В.  | Санкт-Петербург | 2020-03-29 | 5600.00 |
+---------------+-----------------+------------+---------+
Affected rows: 6

  1.6.11. Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки...
SELECT name, sum(per_diem*(DATEDIFF(date_last, date_first)+1)) AS Сумма FROM trip
WHERE name IN (SELECT name FROM trip
                GROUP BY name
                HAVING count(name)>3)
GROUP BY name
Query result:
+---------------+----------+
| name          | Сумма    |
+---------------+----------+
| Абрамова К.А. | 29200.00 |
| Баранов П.Е.  | 21300.00 |
+---------------+----------+
Affected rows: 2

  1.7.2. Создать таблицу fine 
CREATE TABLE fine (fine_id INT PRIMARY KEY AUTO_INCREMENT,
                   name VARCHAR(30),
                   number_plate VARCHAR(6),
                   violation VARCHAR(50),
                   sum_fine DECIMAL(8,2),
                   date_violation DATE,
                   date_payment DATE);

  1.7.3. Добавить в таблицу записи с ключевыми значениями 6, 7, 8
INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
VALUES ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', Null, '2020-02-14', Null);
INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
VALUES ('Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', Null, '2020-02-23', Null);
INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
VALUES ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', Null, '2020-03-03', Null);

  1.7.4. Использование временного имени таблицы (алиаса)
UPDATE fine, traffic_violation 
SET fine.sum_fine=traffic_violation.sum_fine
WHERE fine.date_payment IS Null AND fine.violation=traffic_violation.violation;
SELECT * FROM fine
Query result:
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                        | sum_fine | date_violation | date_payment |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| 1       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 500.00   | 2020-01-12     | 2020-01-17   |
| 2       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-01-14     | 2020-02-27   |
| 3       | Яковлев Г.Р.  | Т330ТТ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-01-23     | 2020-02-23   |
| 4       | Яковлев Г.Р.  | М701АА       | Превышение скорости(от 20 до 40) | 500.00   | 2020-01-12     | None         |
| 5       | Колесов С.П.  | К892АХ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-02-01     | None         |
| 6       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 1000.00  | 2020-02-14     | None         |
| 7       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-02-23     | None         |
| 8       | Яковлев Г.Р.  | Т330ТТ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-03-03     | None         |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
Affected rows: 8

  1.7.5. Далее для всех неоплаченных нарушений (тех, у которых date_payment имеет пустое значение None), необходимо проверить...
SELECT name, number_plate, violation FROM fine
WHERE date_payment IS NULL AND number_plate IN (SELECT number_plate FROM fine
                                                GROUP BY name, number_plate, violation
                                                HAVING count(name)>=2)
ORDER BY name
Query result:
+---------------+--------------+----------------------------------+
| name          | number_plate | violation                        |
+---------------+--------------+----------------------------------+
| Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     |
| Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) |
+---------------+--------------+----------------------------------+
Affected rows: 2

  1.7.6. Увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей...
CREATE TABLE que (
    plate VARCHAR(6),
    new_fine DECIMAL(8,2));
INSERT INTO que (plate, new_fine) 
SELECT number_plate, 2*sum_fine as new_fine FROM fine
WHERE date_payment IS NULL AND number_plate IN (SELECT number_plate FROM fine
                                                        GROUP BY name, number_plate, violation
                                                        HAVING count(name)>=2);
UPDATE fine, que
SET fine.sum_fine = que.new_fine
WHERE fine.number_plate=que.plate AND fine.date_payment IS NULL;
SELECT * FROM fine
Query result:
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                        | sum_fine | date_violation | date_payment |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| 1       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 500.00   | 2020-01-12     | 2020-01-17   |
| 2       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-01-14     | 2020-02-27   |
| 3       | Яковлев Г.Р.  | Т330ТТ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-01-23     | 2020-02-23   |
| 4       | Яковлев Г.Р.  | М701АА       | Превышение скорости(от 20 до 40) | 500.00   | 2020-01-12     | None         |
| 5       | Колесов С.П.  | К892АХ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-02-01     | None         |
| 6       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 2000.00  | 2020-02-14     | None         |
| 7       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 2000.00  | 2020-02-23     | None         |
| 8       | Яковлев Г.Р.  | Т330ТТ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-03-03     | None         |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
Affected rows: 8

  1.7.7. Необходимо в таблицу fine занести дату оплаты соответствующего штрафа...
UPDATE fine AS f, payment AS p
SET f.date_payment=p.date_payment
WHERE f.name=p.name AND f.number_plate=p.number_plate AND f.date_violation = p.date_violation;

UPDATE fine
SET sum_fine=sum_fine*0.5
WHERE fine.date_payment IN (SELECT date_payment FROM payment) AND 
        DATEDIFF(fine.date_payment, fine.date_violation)<20;
SELECT * FROM fine
Query result:
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                        | sum_fine | date_violation | date_payment |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| 1       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 500.00   | 2020-01-12     | 2020-01-17   |
| 2       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 1000.00  | 2020-01-14     | 2020-02-27   |
| 3       | Яковлев Г.Р.  | Т330ТТ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-01-23     | 2020-02-23   |
| 4       | Яковлев Г.Р.  | М701АА       | Превышение скорости(от 20 до 40) | 250.00   | 2020-01-12     | 2020-01-22   |
| 5       | Колесов С.П.  | К892АХ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-02-01     | None         |
| 6       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 2000.00  | 2020-02-14     | 2020-03-15   |
| 7       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 2000.00  | 2020-02-23     | None         |
| 8       | Яковлев Г.Р.  | Т330ТТ       | Проезд на запрещающий сигнал     | 500.00   | 2020-03-03     | 2020-03-21   |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
Affected rows: 8

  1.7.8. Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах 
CREATE Table back_payment 
SELECT name, number_plate, violation, sum_fine, date_violation FROM fine
WHERE date_payment IS NULL;
SELECT * FROM back_payment
Query result:
+---------------+--------------+----------------------------------+----------+----------------+
| name          | number_plate | violation                        | sum_fine | date_violation |
+---------------+--------------+----------------------------------+----------+----------------+
| Колесов С.П.  | К892АХ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-02-01     |
| Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 2000.00  | 2020-02-23     |
+---------------+--------------+----------------------------------+----------+----------------+
Affected rows: 2

  1.7.9. Удалить из таблицы fine информацию о нарушениях, совершенных раньше 1 февраля 2020 года. 
DELETE FROM fine WHERE date_violation<'2020-02-01';
SELECT * FROM fine
Query result:
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| fine_id | name          | number_plate | violation                        | sum_fine | date_violation | date_payment |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
| 5       | Колесов С.П.  | К892АХ       | Превышение скорости(от 20 до 40) | 500.00   | 2020-02-01     | None         |
| 6       | Баранов П.Е.  | Р523ВТ       | Превышение скорости(от 40 до 60) | 2000.00  | 2020-02-14     | 2020-03-15   |
| 7       | Абрамова К.А. | О111АВ       | Проезд на запрещающий сигнал     | 2000.00  | 2020-02-23     | None         |
| 8       | Яковлев Г.Р.  | Т330ТТ       | Проезд на запрещающий сигнал     | 500.00   | 2020-03-03     | 2020-03-21   |
+---------+---------------+--------------+----------------------------------+----------+----------------+--------------+
Affected rows: 4

  2.1.6. Создать таблицу author
CREATE TABLE author (author_id INT PRIMARY KEY AUTO_INCREMENT,
                     name_author VARCHAR(50))

  2.1.7. Заполнить таблицу author
INSERT INTO author(name_author) VALUES ('Булгаков М.А.');
INSERT INTO author(name_author) VALUES ('Достоевский Ф.М.');
INSERT INTO author(name_author) VALUES ('Есенин С.А.');
INSERT INTO author(name_author) VALUES ('Пастернак Б.Л.');
SELECT * FROM author
Query result:
+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 1         | Булгаков М.А.    |
| 2         | Достоевский Ф.М. |
| 3         | Есенин С.А.      |
| 4         | Пастернак Б.Л.   |
+-----------+------------------+
Affected rows: 4

  2.1.8. Создание таблицы с внешними ключами
CREATE TABLE book(book_id INT PRIMARY KEY AUTO_INCREMENT,
                  title VARCHAR(50),
                  author_id INT,
                  genre_id INT,
                  price DECIMAL(8,2),
                  amount INT,
                  FOREIGN KEY (author_id) REFERENCES author (author_id),
                  FOREIGN KEY (genre_id) REFERENCES genre (genre_id))

  2.1.9. Действия при удалении записи главной таблицы
CREATE TABLE book(book_id INT PRIMARY KEY AUTO_INCREMENT,
                  title VARCHAR(30),
                  author_id INT,
                  genre_id INT,
                  price DECIMAL(8,2),
                  amount INT,
                  FOREIGN KEY (author_id) REFERENCES author (author_id) ON DELETE CASCADE,
                  FOREIGN KEY (genre_id) REFERENCES genre (genre_id) ON DELETE SET NULL)

  2.1.10. Добавьте три последние записи (с ключевыми значениями 6, 7, 8) в таблицу book
INSERT INTO book (title, author_id, genre_id, price, amount) VALUES ("Стихотворения и поэмы",3,2,650.00,15);
INSERT INTO book (title, author_id, genre_id, price, amount) VALUES ('Черный человек',3,2,570.20,6);
INSERT INTO book (title, author_id, genre_id, price, amount) VALUES ('Лирика',4,2,518.99,2);
select * FROM book
Query result:
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 5      |
| 3       | Идиот                 | 2         | 1        | 460.00 | 10     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
+---------+-----------------------+-----------+----------+--------+--------+
Affected rows: 8

  2.2.2. Соединение INNER JOIN
SELECT title, genre.name_genre, price 
FROM book INNER JOIN genre
ON book.genre_id=genre.genre_id
WHERE amount>8
ORDER BY price DESC
Query result:
+-----------------------+------------+--------+
| title                 | name_genre | price  |
+-----------------------+------------+--------+
| Стихотворения и поэмы | Поэзия     | 650.00 |
| Игрок                 | Роман      | 480.50 |
| Идиот                 | Роман      | 460.00 |
+-----------------------+------------+--------+
Affected rows: 3

  2.2.3. Внешнее соединение LEFT и RIGHT OUTER JOIN
SELECT name_genre from genre
left join book
on book.genre_id=genre.genre_id
where amount is null
Query result:
+-------------+
| name_genre  |
+-------------+
| Приключения |
+-------------+
Affected rows: 1

  2.2.4. Перекрестное соединение CROSS JOIN
SELECT name_city, name_author, DATE_ADD('2020-01-01', INTERVAL FLOOR(RAND()*365) DAY) AS Дата
FROM city CROSS JOIN author
ORDER BY name_city, Дата
Query result:
+-----------------+------------------+------------+
| name_city       | name_author      | Дата       |
+-----------------+------------------+------------+
| Владивосток     | Лермонтов М.Ю.   | 2020-04-01 |
| Владивосток     | Пастернак Б.Л.   | 2020-05-10 |
| Владивосток     | Булгаков М.А.    | 2020-08-04 |
| Владивосток     | Достоевский Ф.М. | 2020-08-16 |
| Владивосток     | Есенин С.А.      | 2020-12-22 |
| Москва          | Лермонтов М.Ю.   | 2020-01-27 |
| Москва          | Есенин С.А.      | 2020-05-02 |
| Москва          | Достоевский Ф.М. | 2020-05-05 |
| Москва          | Пастернак Б.Л.   | 2020-07-01 |
| Москва          | Булгаков М.А.    | 2020-12-04 |
| Санкт-Петербург | Лермонтов М.Ю.   | 2020-04-17 |
| Санкт-Петербург | Пастернак Б.Л.   | 2020-07-27 |
| Санкт-Петербург | Есенин С.А.      | 2020-10-17 |
| Санкт-Петербург | Булгаков М.А.    | 2020-11-15 |
| Санкт-Петербург | Достоевский Ф.М. | 2020-12-05 |
+-----------------+------------------+------------+
Affected rows: 15

  2.2.5. Запросы на выборку из нескольких таблиц
SELECT name_genre, title, name_author
FROM author INNER JOIN book
ON author.author_id=book.author_id
    INNER JOIN genre
    ON genre.genre_id = book.genre_id
WHERE name_genre LIKE '%Роман%'
ORDER BY title
Query result:
+------------+--------------------+------------------+
| name_genre | title              | name_author      |
+------------+--------------------+------------------+
| Роман      | Белая гвардия      | Булгаков М.А.    |
| Роман      | Братья Карамазовы  | Достоевский Ф.М. |
| Роман      | Игрок              | Достоевский Ф.М. |
| Роман      | Идиот              | Достоевский Ф.М. |
| Роман      | Мастер и Маргарита | Булгаков М.А.    |
+------------+--------------------+------------------+
Affected rows: 5

  2.2.6. Запросы для нескольких таблиц с группировкой
SELECT name_author, sum(amount) AS Количество
FROM author LEFT JOIN book
ON book.author_id=author.author_id
GROUP BY name_author
HAVING Количество<10 OR Количество IS NULL
ORDER BY Количество
Query result:
+----------------+------------+
| name_author    | Количество |
+----------------+------------+
| Лермонтов М.Ю. | None       |
| Пастернак Б.Л. | 2          |
| Булгаков М.А.  | 8          |
+----------------+------------+
Affected rows: 3

  2.2.7. Запросы для нескольких таблиц со вложенными запросами
SELECT name_author FROM author
INNER JOIN book
ON author.author_id=book.book_id
WHERE author.author_id IN (
SELECT author_id FROM book
                  GROUP BY author_id
                  HAVING count(DISTINCT genre_id)=1);
Query result:
+------------------+
| name_author      |
+------------------+
| Достоевский Ф.М. |
| Пастернак Б.Л.   |
+------------------+
Affected rows: 2

  2.2.8. Вложенные запросы в операторах соединения
SELECT title, author.name_author, genre.name_genre, price, amount 
FROM book INNER JOIN genre
ON book.genre_id=genre.genre_id
    inner join author
    on book.author_id=author.author_id
WHERE title in
(SELECT title FROM book
WHERE book.genre_id in
(SELECT q1.genre_id
FROM (SELECT genre_id, sum(amount) AS SA FROM book
      GROUP BY genre_id) q1
      INNER JOIN (SELECT genre_id, sum(amount) AS SA from book
                  GROUP BY genre_id
                  order BY SA DESC
                  limit 1) q2
       ON q1.SA=q2.SA))
order by title
Query result:
+-----------------------+------------------+------------+--------+--------+
| title                 | name_author      | name_genre | price  | amount |
+-----------------------+------------------+------------+--------+--------+
| Белая гвардия         | Булгаков М.А.    | Роман      | 540.50 | 5      |
| Братья Карамазовы     | Достоевский Ф.М. | Роман      | 799.01 | 3      |
| Игрок                 | Достоевский Ф.М. | Роман      | 480.50 | 10     |
| Идиот                 | Достоевский Ф.М. | Роман      | 460.00 | 10     |
| Лирика                | Пастернак Б.Л.   | Поэзия     | 518.99 | 10     |
| Мастер и Маргарита    | Булгаков М.А.    | Роман      | 670.99 | 3      |
| Стихотворения и поэмы | Есенин С.А.      | Поэзия     | 650.00 | 15     |
| Черный человек        | Есенин С.А.      | Поэзия     | 570.20 | 6      |
+-----------------------+------------------+------------+--------+--------+
Affected rows: 8

  2.2.9. Операция соединение, использование USING()
SELECT title as Название, author AS Автор, supply.amount+book.amount AS Количество FROM book
INNER JOIN supply 
USING (title, price)
Query result:
+----------------+-------------+------------+
| Название       | Автор       | Количество |
+----------------+-------------+------------+
| Черный человек | Есенин С.А. | 12         |
+----------------+-------------+------------+
Affected rows: 1

  2.2.10. Свободное задание.
SELECT title, name_author, name_genre, price, amount 
FROM book INNER JOIN author
USING (author_id)
    INNER JOIN genre USING (genre_id)
WHERE price IN (
SELECT max(price) FROM book
GROUP BY author_id)
Query result:
+-----------------------+------------------+------------+--------+--------+
| title                 | name_author      | name_genre | price  | amount |
+-----------------------+------------------+------------+--------+--------+
| Мастер и Маргарита    | Булгаков М.А.    | Роман      | 670.99 | 3      |
| Братья Карамазовы     | Достоевский Ф.М. | Роман      | 799.01 | 3      |
| Стихотворения и поэмы | Есенин С.А.      | Поэзия     | 650.00 | 15     |
| Лирика                | Пастернак Б.Л.   | Поэзия     | 518.99 | 2      |
+-----------------------+------------------+------------+--------+--------+
Affected rows: 4

  2.3.2. Запросы на обновление, связанные таблицы
UPDATE book
    INNER JOIN author USING (author_id)
        INNER JOIN supply
        ON author.name_author=supply.author
        AND book.title=supply.title
SET book.amount = book.amount + supply.amount,
    book.price = (book.price * book.amount + supply.price * supply.amount) / (book.amount + supply.amount),
    supply.amount=0
WHERE book.price<>supply.price;
SELECT * FROM book;
SELECT * FROM supply;
Query result:
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 5      |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
+---------+-----------------------+-----------+----------+--------+--------+
Affected rows: 8
Query result:
+-----------+-----------------------+------------------+--------+--------+
| supply_id | title                 | author           | price  | amount |
+-----------+-----------------------+------------------+--------+--------+
| 1         | Доктор Живаго         | Пастернак Б.Л.   | 380.80 | 4      |
| 2         | Черный человек        | Есенин С.А.      | 570.20 | 6      |
| 3         | Белая гвардия         | Булгаков М.А.    | 540.50 | 7      |
| 4         | Идиот                 | Достоевский Ф.М. | 360.80 | 0      |
| 5         | Стихотворения и поэмы | Лермонтов М.Ю.   | 255.90 | 4      |
| 6         | Остров сокровищ       | Стивенсон Р.Л.   | 599.99 | 5      |
+-----------+-----------------------+------------------+--------+--------+
Affected rows: 6

  2.3.3. Запросы на добавление, связанные таблицы
INSERT INTO author (name_author)
SELECT supply.author FROM author RIGHT JOIN supply
ON author.name_author=supply.author
WHERE author.name_author IS NULL;
SELECT * FROM author;
Query result:
+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 1         | Булгаков М.А.    |
| 2         | Достоевский Ф.М. |
| 3         | Есенин С.А.      |
| 4         | Пастернак Б.Л.   |
| 5         | Лермонтов М.Ю.   |
| 6         | Стивенсон Р.Л.   |
+-----------+------------------+
Affected rows: 6

  2.4.4. Запрос на добавление, связанные таблицы
INSERT INTO book (title,author_id, price, amount)
SELECT title, author_id, price, amount FROM supply
LEFT JOIN author
ON author.name_author=supply.author
WHERE amount<>0;
select * from book
Query result:
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
| 9       | Доктор Живаго         | 4         | None     | 380.80 | 4      |
| 10      | Стихотворения и поэмы | 5         | None     | 255.90 | 4      |
| 11      | Остров сокровищ       | 6         | None     | 599.99 | 5      |
+---------+-----------------------+-----------+----------+--------+--------+
Affected rows: 11

  2.4.5. Запрос на обновление, вложенные запросы
UPDATE book
SET genre_id=2 WHERE book_id=10;
UPDATE book
SET genre_id=3 WHERE book_id=11;
SELECT * FROM book
Query result:
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
| 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
| 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
| 11      | Остров сокровищ       | 6         | 3        | 599.99 | 5      |
+---------+-----------------------+-----------+----------+--------+--------+
Affected rows: 11

 2.4.6. Каскадное удаление записей связанных таблиц
SELECT author_id, name_author FROM author 
WHERE author_id IN
(SELECT author_id FROM book
GROUP BY author_id
HAVING sum(amount)>20);

DELETE FROM author
WHERE author_id IN
(SELECT author_id FROM book
GROUP BY author_id
HAVING sum(amount)<20);

SELECT * FROM book;
Query result:
+-----------+------------------+
| author_id | name_author      |
+-----------+------------------+
| 2         | Достоевский Ф.М. |
| 3         | Есенин С.А.      |
+-----------+------------------+
Affected rows: 2
Affected rows: 4
Query result:
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
+---------+-----------------------+-----------+----------+--------+--------+
Affected rows: 5

  2.4.7. Удаление записей главной таблицы с сохранением записей в зависимой
DELETE FROM genre
WHERE genre_id in
(SELECT genre_id FROM book
GROUP BY genre_id
HAVING COUNT(title)<3);
SELECT * FROM genre;
SELECT * FROM book;
Query result:
+----------+------------+
| genre_id | name_genre |
+----------+------------+
| 1        | Роман      |
| 2        | Поэзия     |
+----------+------------+
Affected rows: 2
Query result:
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 12     |
| 3       | Идиот                 | 2         | 1        | 437.11 | 13     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 12     |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
| 9       | Доктор Живаго         | 4         | 1        | 380.80 | 4      |
| 10      | Стихотворения и поэмы | 5         | 2        | 255.90 | 4      |
| 11      | Остров сокровищ       | 6         | None     | 599.99 | 5      |
+---------+-----------------------+-----------+----------+--------+--------+
Affected rows: 11

  2.4.8. Свободное задание
UPDATE book, supply
SET book.price=CASE
        WHEN book.price>supply.price THEN book.price
        ELSE supply.price
        END;
 SELECT * FROM book
 Query result:
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 5      |
| 3       | Идиот                 | 2         | 1        | 460.00 | 10     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
| 8       | Лирика                | 4         | 2        | 518.99 | 2      |
+---------+-----------------------+-----------+----------+--------+--------+
Affected rows: 8

  2.4.5. Запросы на основе трех и более связанных таблиц
SELECT buy_id, title, price, buy_book.amount
FROM client INNER JOIN buy USING (client_id)
            INNER JOIN buy_book USING (buy_id)
            INNER JOIN book USING (book_id)
WHERE name_client='Баранов Павел'
Query result:
+--------+--------------------+--------+--------+
| buy_id | title              | price  | amount |
+--------+--------------------+--------+--------+
| 1      | Мастер и Маргарита | 670.99 | 1      |
| 1      | Черный человек     | 570.20 | 2      |
| 4      | Игрок              | 480.50 | 1      |
+--------+--------------------+--------+--------+
Affected rows: 3

  2.4.6. Посчитать, сколько раз была заказана каждая книга...
SELECT name_author, title, count(buy_book.amount) AS Количество FROM buy_book
    RIGHT JOIN book USING (book_id)
        INNER JOIN author USING (author_id)
GROUP BY name_author, title
ORDER BY name_author, title
Query result:
+------------------+-----------------------+------------+
| name_author      | title                 | Количество |
+------------------+-----------------------+------------+
| Булгаков М.А.    | Белая гвардия         | 1          |
| Булгаков М.А.    | Мастер и Маргарита    | 2          |
| Достоевский Ф.М. | Братья Карамазовы     | 0          |
| Достоевский Ф.М. | Игрок                 | 1          |
| Достоевский Ф.М. | Идиот                 | 1          |
| Есенин С.А.      | Стихотворения и поэмы | 0          |
| Есенин С.А.      | Черный человек        | 1          |
| Пастернак Б.Л.   | Лирика                | 1          |
+------------------+-----------------------+------------+
Affected rows: 8

  2.4.7. Вывести города, в которых живут клиенты...
SELECT name_city, count(name_client) AS Количество FROM buy
        INNER JOIN client USING (client_id)
            INNER JOIN city USING (city_id)
GROUP BY name_city
ORDER BY Количество DESC, name_city
Query result:
+-----------------+------------+
| name_city       | Количество |
+-----------------+------------+
| Владивосток     | 2          |
| Москва          | 1          |
| Санкт-Петербург | 1          |
+-----------------+------------+
Affected rows: 3

  2.4.8. Вывести номера всех оплаченных заказов и даты, когда они были оплачены.
SELECT buy_id, date_step_end FROM buy_step
WHERE step_id=1 AND date_step_end is not null
Query result:
+--------+---------------+
| buy_id | date_step_end |
+--------+---------------+
| 1      | 2020-02-20    |
| 2      | 2020-02-28    |
| 3      | 2020-03-05    |
+--------+---------------+
Affected rows: 3

  2.4.9. Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя)...
SELECT buy_id, name_client, sum(book.price*buy_book.amount) AS Стоимость FROM client
    INNER JOIN buy USING (client_id)
        INNER JOIN buy_book USING (buy_id)
            INNER JOIN book USING (book_id)
GROUP BY buy_id, name_client
Query result:
+--------+----------------+-----------+
| buy_id | name_client    | Стоимость |
+--------+----------------+-----------+
| 1      | Баранов Павел  | 1811.39   |
| 2      | Семенонов Иван | 1037.98   |
| 3      | Абрамова Катя  | 2131.49   |
| 4      | Баранов Павел  | 480.50    |
+--------+----------------+-----------+
Affected rows: 4

  2.4.10. Вывести все заказы и названия этапов, на которых они в данный момент находятся...
SELECT buy_id, name_step FROM buy_step INNER JOIN step
ON buy_step.step_id=step.step_id
WHERE buy_id NOT IN
            (SELECT buy_id FROM buy_step
             WHERE step_id=4 AND date_step_end IS NOT NULL)
    and date_step_beg is not null 
    and date_step_end is null
ORDER BY buy_id
Query result:
+--------+-----------------+
| buy_id | name_step       |
+--------+-----------------+
| 2      | Транспортировка |
| 3      | Доставка        |
| 4      | Оплата          |
+--------+-----------------+
Affected rows: 3

  2.4.11. В таблице city для каждого города указано количество дней...
SELECT buy_id, 
DATEDIFF(date_step_end, date_step_beg) AS Количество_дней,
IF (DATEDIFF(date_step_end, date_step_beg)>days_delivery,
        (DATEDIFF(date_step_end, date_step_beg)- days_delivery),0) AS Опоздание
FROM buy_step
    INNER JOIN buy USING (buy_id)
        INNER JOIN client USING (client_id)
            INNER JOIN city USING (city_id)
WHERE step_id=3 AND date_step_beg IS NOT NULL AND date_step_end IS NOT NULL
ORDER BY buy_id
Query result:
+--------+-----------------+-----------+
| buy_id | Количество_дней | Опоздание |
+--------+-----------------+-----------+
| 1      | 14              | 2         |
| 3      | 4               | 0         |
+--------+-----------------+-----------+
Affected rows: 2

  2.4.12. Выбрать всех клиентов, которые заказывали книги Достоевского...
SELECT name_client FROM client
    INNER JOIN buy USING (client_id)
        INNER JOIN buy_book USING (buy_id)
           INNER JOIN book USING (book_id)
              INNER JOIN author USING (author_id)
WHERE name_author='Достоевский Ф.М.'
Query result:
+---------------+
| name_client   |
+---------------+
| Абрамова Катя |
| Баранов Павел |
+---------------

  2.4.13. Вывести жанр (или жанры), в котором было заказано больше всего экземпляров книг, указать это количество
SELECT name_genre, sum(buy_book.amount) as Количество FROM buy_book
    INNER JOIN book USING (book_id)
        INNER JOIN genre USING (genre_id)
GROUP BY name_genre
ORDER BY Количество DESC
LIMIT 1
Query result:
+------------+------------+
| name_genre | Количество |
+------------+------------+
| Роман      | 6          |
+------------+------------+
Affected rows: 1

  2.4.14. Свободное задание
SELECT name_client, count(buy.client_id), sum(buy_book.amount), SUM(buy_book.amount*price) AS tot FROM client
    INNER JOIN buy USING (client_id)
        INNER JOIN buy_book USING (buy_id)
             INNER JOIN book USING (book_id)
GROUP BY client_id
HAVING TOT>(SELECT AVG(tot) FROM
     (SELECT SUM(buy_book.amount*price) AS tot FROM client
         INNER JOIN buy USING (client_id)
             INNER JOIN buy_book USING (buy_id)
                 INNER JOIN book USING (book_id)
     GROUP BY client_id) TT);
select client_id ,count(buy.client_id) FROM buy
GROUP BY client_id
Query result:
+---------------+----------------------+----------------------+---------+
| name_client   | count(buy.client_id) | sum(buy_book.amount) | tot     |
+---------------+----------------------+----------------------+---------+
| Баранов Павел | 3                    | 4                    | 2291.89 |
| Абрамова Катя | 3                    | 4                    | 2131.49 |
+---------------+----------------------+----------------------+---------+
Affected rows: 2
Query result:
+-----------+----------------------+
| client_id | count(buy.client_id) |
+-----------+----------------------+
| 1         | 2                    |
| 2         | 1                    |
| 3         | 1                    |
+-----------+----------------------+
Affected rows: 3

  2.5.2. Включить нового человека в таблицу с клиентами...
INSERT INTO client(name_client, city_id, email)
VALUES ('Попов Илья', (SELECT city_id FROM city WHERE name_city='Москва'), 'popov@test');
SELECT * FROM client
Query result:
+-----------+-----------------+---------+----------------+
| client_id | name_client     | city_id | email          |
+-----------+-----------------+---------+----------------+
| 1         | Баранов Павел   | 3       | baranov@test   |
| 2         | Абрамова Катя   | 1       | abramova@test  |
| 3         | Семенонов Иван  | 2       | semenov@test   |
| 4         | Яковлева Галина | 1       | yakovleva@test |
| 5         | Попов Илья      | 1       | popov@test     |
+-----------+-----------------+---------+----------------+
Affected rows: 5

  2.5.3. Создать новый заказ для Попова Ильи...
INSERT INTO buy (buy_description, client_id)
VALUES ('Связаться со мной по вопросу доставки', 
        (SELECT client_id FROM client WHERE name_client='Попов Илья'));
SELECT * FROM buy
Query result:
+--------+---------------------------------------+-----------+
| buy_id | buy_description                       | client_id |
+--------+---------------------------------------+-----------+
| 1      | Доставка только вечером               | 1         |
| 2      | None                                  | 3         |
| 3      | Упаковать каждую книгу по отдельности | 2         |
| 4      | None                                  | 1         |
| 5      | Связаться со мной по вопросу доставки | 5         |
+--------+---------------------------------------+-----------+
Affected rows: 5

  2.5.4. Включить в заказ с номером 5 книгу Пастернака «Лирика»...
INSERT INTO buy_book(buy_id, book_id, amount) VALUES(5, (SELECT book_id FROM book WHERE title='Лирика'), 2);
INSERT INTO buy_book(buy_id, book_id, amount) VALUES(5, (SELECT book_id FROM book WHERE title='Белая гвардия'),1);
SELECT * FROM buy_book
Query result:
+-------------+--------+---------+--------+
| buy_book_id | buy_id | book_id | amount |
+-------------+--------+---------+--------+
| 1           | 1      | 1       | 1      |
| 2           | 1      | 7       | 2      |
| 3           | 2      | 8       | 2      |
| 4           | 3      | 3       | 2      |
| 5           | 3      | 2       | 1      |
| 6           | 3      | 1       | 1      |
| 7           | 4      | 5       | 1      |
| 8           | 5      | 8       | 2      |
| 9           | 5      | 2       | 1      |
+-------------+--------+---------+--------+
Affected rows: 9

  2.5.5. Уменьшить количество тех книг на складе, которые были включены в заказ с номером 5.
UPDATE book
SET amount = amount - (SELECT amount FROM buy_book WHERE buy_id=5 AND book.book_id=buy_book.book_id)
WHERE book_id in (SELECT book_id FROM buy_book WHERE buy_id=5 AND book.book_id=buy_book.book_id);
select * FROM book
Query result:
+---------+-----------------------+-----------+----------+--------+--------+
| book_id | title                 | author_id | genre_id | price  | amount |
+---------+-----------------------+-----------+----------+--------+--------+
| 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
| 2       | Белая гвардия         | 1         | 1        | 540.50 | 4      |
| 3       | Идиот                 | 2         | 1        | 460.00 | 10     |
| 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
| 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
| 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
| 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
| 8       | Лирика                | 4         | 2        | 518.99 | 0      |
+---------+-----------------------+-----------+----------+--------+--------+
Affected rows: 8

  2.5.6. Создать счет (таблицу buy_pay) на оплату заказа с номером 5...
CREATE TABLE buy_pay AS
SELECT title, name_author, price, buy_book.amount, buy_book.amount*price AS Стоимость FROM buy_book
    INNER JOIN book USING (book_id)
        INNER JOIN author USING (author_id)
WHERE buy_id=5
ORDER BY title;
SELECT * FROM buy_pay
Query result:
+---------------+----------------+--------+--------+-----------+
| title         | name_author    | price  | amount | Стоимость |
+---------------+----------------+--------+--------+-----------+
| Белая гвардия | Булгаков М.А.  | 540.50 | 1      | 540.50    |
| Лирика        | Пастернак Б.Л. | 518.99 | 2      | 1037.98   |
+---------------+----------------+--------+--------+-----------+
Affected rows: 2

  2.5.7. Создать общий счет (таблицу buy_pay) на оплату заказа с номером 5...
CREATE TABLE buy_pay AS
SELECT buy_id, sum(buy_book.amount) as Количество, sum(buy_book.amount*price) As Итого FROM buy_book
    INNER JOIN book USING(book_id)
WHERE buy_id=5;
SELECT * FROM buy_pay
Query result:
+--------+------------+---------+
| buy_id | Количество | Итого   |
+--------+------------+---------+
| 5      | 3          | 1578.48 |
+--------+------------+---------+
Affected rows: 1

  2.5.8. В таблицу buy_step для заказа с номером 5 включить все этапы из таблицы step...
INSERT INTO buy_step (buy_id, step_id)
SELECT buy_id, step_id FROM step
CROSS JOIN buy
WHERE buy.buy_id=5;
SELECT * FROM buy_step
Query result:
+-------------+--------+---------+---------------+---------------+
| buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
+-------------+--------+---------+---------------+---------------+
| 1           | 1      | 1       | 2020-02-20    | 2020-02-20    |
| 2           | 1      | 2       | 2020-02-20    | 2020-02-21    |
| 3           | 1      | 3       | 2020-02-22    | 2020-03-07    |
| 4           | 1      | 4       | 2020-03-06    | 2020-03-06    |
| 5           | 2      | 1       | 2020-02-28    | 2020-02-28    |
| 6           | 2      | 2       | 2020-02-29    | 2020-03-01    |
| 7           | 2      | 3       | 2020-03-02    | None          |
| 8           | 2      | 4       | None          | None          |
| 9           | 3      | 1       | 2020-03-05    | 2020-03-05    |
| 10          | 3      | 2       | 2020-03-05    | 2020-03-06    |
| 11          | 3      | 3       | 2020-03-06    | 2020-03-10    |
| 12          | 3      | 4       | 2020-03-11    | None          |
| 13          | 4      | 1       | 2020-03-20    | None          |
| 14          | 4      | 2       | None          | None          |
| 15          | 4      | 3       | None          | None          |
| 16          | 4      | 4       | None          | None          |
| 17          | 5      | 1       | None          | None          |
| 18          | 5      | 2       | None          | None          |
| 19          | 5      | 3       | None          | None          |
| 20          | 5      | 4       | None          | None          |
+-------------+--------+---------+---------------+---------------+
Affected rows: 20

  2.5.9. В таблицу buy_step занести дату 12.04.2020 выставления счета на оплату заказа с номером 5
UPDATE buy_step
SET date_step_beg='2020-04-12'
WHERE buy_id=5 AND step_id=1;
SELECT * FROM buy_step
WHERE buy_id=5
Query result:
+-------------+--------+---------+---------------+---------------+
| buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
+-------------+--------+---------+---------------+---------------+
| 17          | 5      | 1       | 2020-04-12    | None          |
| 18          | 5      | 2       | None          | None          |
| 19          | 5      | 3       | None          | None          |
| 20          | 5      | 4       | None          | None          |
+-------------+--------+---------+---------------+---------------+
Affected rows: 4

  2.5.10. Завершить этап «Оплата» для заказа с номером 5, вставив в столбец date_step_end дату 13.04.2020...
UPDATE buy_step
SET date_step_end='2020-04-13' 
WHERE buy_id=5 AND step_id=1;

UPDATE buy_step
SET date_step_beg = '2020-04-13'
WHERE buy_id=5 AND step_id = 2;
SELECT * FROM buy_step
WHERE buy_id=5
Query result:
+-------------+--------+---------+---------------+---------------+
| buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
+-------------+--------+---------+---------------+---------------+
| 17          | 5      | 1       | 2020-04-12    | 2020-04-13    |
| 18          | 5      | 2       | 2020-04-13    | None          |
| 19          | 5      | 3       | None          | None          |
| 20          | 5      | 4       | None          | None          |
+-------------+--------+---------+---------------+---------------+
Affected rows: 4

  2.5.11. Свободное задание
SELECT step_id + 1 
FROM step
WHERE name_step = 'Оплата'
Query result:
+-------------+--------+---------+---------------+---------------+
| buy_step_id | buy_id | step_id | date_step_beg | date_step_end |
+-------------+--------+---------+---------------+---------------+
| 17          | 5      | 1       | 2020-04-12    | 2020-04-13    |
| 18          | 5      | 2       | 2020-04-13    | None          |
| 19          | 5      | 3       | None          | None          |
| 20          | 5      | 4       | None          | None          |
+-------------+--------+---------+---------------+---------------+
Affected rows: 4

  3.1.2. Вывести студентов, которые сдавали дисциплину «Основы баз данных»...
SELECT name_student, date_attempt, result FROM student
  JOIN attempt on attempt.student_id=student.student_id
    JOIN subject on subject.subject_id=attempt.subject_id
WHERE name_subject='Основы баз данных'
ORDER BY result DESC
Query result:
+-----------------+--------------+--------+
| name_student    | date_attempt | result |
+-----------------+--------------+--------+
| Яковлева Галина | 2020-04-21   | 100    |
| Баранов Павел   | 2020-03-23   | 67     |
| Яковлева Галина | 2020-03-26   | 0      |
+-----------------+--------------+--------+
Affected rows: 3

  3.1.3. Вывести, сколько попыток сделали студенты по каждой дисциплине...
SELECT name_subject, COUNT(student_id) AS Количество, ROUND(AVG(result),2) AS Среднее FROM attempt
    RIGHT OUTER JOIN subject USING (subject_id)
GROUP BY name_subject
Query result:
+-------------------+------------+---------+
| name_subject      | Количество | Среднее |
+-------------------+------------+---------+
| Основы SQL        | 4          | 58.25   |
| Основы баз данных | 3          | 55.67   |
| Физика            | 0          | None    |
+-------------------+------------+---------+
Affected rows: 3

  3.1.4. Вывести студента (различных студентов), имеющих максимальные результаты попыток...
SELECT name_student, max(result) AS result FROM attempt
    INNER JOIN student USING (student_id)
GROUP BY name_student
HAVING max(result)=(SELECT MAX(result) FROM attempt)
Query result:
+-----------------+--------+
| name_student    | result |
+-----------------+--------+
| Семенов Иван    | 100    |
| Яковлева Галина | 100    |
+-----------------+--------+
Affected rows: 2

  3.1.5. Если студент совершал несколько попыток по одной и той же дисциплине...
SELECT name_student, name_subject , DATEDIFF(MAX(date_attempt), MIN(date_attempt)) AS Интервал FROM attempt 
    INNER JOIN student USING(student_id)
        INNER JOIN subject USING(subject_id)
GROUP BY subject_id, student_id
HAVING count(result)>1
ORDER BY Интервал 
Query result:
+-----------------+-------------------+----------+
| name_student    | name_subject      | Интервал |
+-----------------+-------------------+----------+
| Яковлева Галина | Основы баз данных | 26       |
| Семенов Иван    | Основы SQL        | 55       |
+-----------------+-------------------+----------+
Affected rows: 2

  3.1.6. Вывести количество студентов, которые проходили тестирование по каждой дисциплине...
SELECT name_subject, count(DISTINCT student_id) AS Количество FROM attempt
RIGHT JOIN subject USING(subject_id)
GROUP BY subject_id
Query result:
+-------------------+------------+
| name_subject      | Количество |
+-------------------+------------+
| Основы SQL        | 2          |
| Основы баз данных | 2          |
| Физика            | 0          |
+-------------------+------------+
Affected rows: 3

  3.1.6. Случайным образом отберите 3 вопроса по дисциплине «Основы баз данных».
SELECT question_id, name_question FROM question
    INNER JOIN subject USING(subject_id)
WHERE name_subject='Основы баз данных'
ORDER BY RAND()
LIMIT 3
Query result:
+-------------+-----------------------------------------------------+
| question_id | name_question                                       |
+-------------+-----------------------------------------------------+
| 8           | Концептуальная модель используется для              |
| 9           | Какой тип данных не допустим в реляционной таблице? |
| 6           | База данных - это:                                  |
+-------------+-----------------------------------------------------+
Affected rows: 3

  3.1.7. Вывести вопросы, которые были включены в тест для Семенова Ивана по дисциплине...
SELECT name_question, name_answer, IF (is_correct=0, 'Неверно', 'Верно') AS Результат FROM testing
    INNER JOIN question USING(question_id)
        INNER JOIN answer USING(answer_id)
            INNER JOIN attempt USING(attempt_id)
                INNER JOIN student USING(student_id)
WHERE name_student='Семенов Иван' AND date_attempt='2020-05-17'
Query result:
+----------------------------------------------------------+-----------------------+-----------+
| name_question                                            | name_answer           | Результат |
+----------------------------------------------------------+-----------------------+-----------+
| Запрос на выборку начинается с ключевого слова:          | INSERT                | Неверно   |
| Какой запрос выбирает все записи из таблицы student:     | SELECT * FROM student | Верно     |
| Для внутреннего соединения таблиц используется оператор: | CROSS JOIN            | Неверно   |
+----------------------------------------------------------+-----------------------+-----------+
Affected rows: 3

  3.1.8. Посчитать результаты тестирования. Результат попытки вычислить как количество правильных ответов...
SELECT name_student,
        name_subject, date_attempt, 
        round(sum(is_correct)/3*100,2) AS Результат 
FROM answer
    INNER JOIN testing USING(answer_id)
            INNER JOIN attempt USING(attempt_id)
                INNER JOIN subject USING(subject_id)
                    INNER JOIN student USING(student_id)
GROUP BY name_student, name_subject, date_attempt
ORDER BY name_student, date_attempt DESC
Query result:
+-----------------+-------------------+--------------+-----------+
| name_student    | name_subject      | date_attempt | Результат |
+-----------------+-------------------+--------------+-----------+
| Баранов Павел   | Основы SQL        | 2020-04-15   | 33.33     |
| Баранов Павел   | Основы баз данных | 2020-03-23   | 66.67     |
| Семенов Иван    | Основы SQL        | 2020-05-17   | 33.33     |
| Семенов Иван    | Основы SQL        | 2020-04-15   | 66.67     |
| Семенов Иван    | Основы SQL        | 2020-03-23   | 100.00    |
| Яковлева Галина | Основы баз данных | 2020-04-21   | 100.00    |
| Яковлева Галина | Основы баз данных | 2020-03-26   | 0.00      |
+-----------------+-------------------+--------------+-----------+
Affected rows: 7

  3.1.9. Для каждого вопроса вывести процент успешных решений, то есть отношение количества верных...
SELECT name_subject, concat(LEFT(name_question,30),'...') AS Вопрос,
        count(answer.question_id) as Всего_ответов,
        ROUND(sum(is_correct)/count(answer.question_id)*100,2) AS Успешность 
FROM subject
    INNER JOIN question USING(subject_id)
        INNER JOIN testing ON question.question_id=testing.question_id
            INNER JOIN answer USING(answer_id)
GROUP BY name_subject, name_question
ORDER BY name_subject, Успешность DESC, name_question
Query result:
+-------------------+-----------------------------------+---------------+------------+
| name_subject      | Вопрос                            | Всего_ответов | Успешность |
+-------------------+-----------------------------------+---------------+------------+
| Основы SQL        | Условие, по которому отбираютс... | 1             | 100.00     |
| Основы SQL        | Запрос на выборку начинается с... | 4             | 75.00      |
| Основы SQL        | Какой запрос выбирает все запи... | 3             | 66.67      |
| Основы SQL        | Для сортировки используется:...   | 2             | 50.00      |
| Основы SQL        | Для внутреннего соединения таб... | 2             | 0.00       |
| Основы баз данных | База данных - это:...             | 3             | 66.67      |
| Основы баз данных | Какой тип данных не допустим в... | 2             | 50.00      |
| Основы баз данных | Концептуальная модель использу... | 2             | 50.00      |
| Основы баз данных | Отношение - это:...               | 2             | 50.00      |
+-------------------+-----------------------------------+---------------+------------+
Affected rows: 9

  3.2.2. В таблицу attempt включить новую попытку для студента Баранова Павла по дисциплине «Основы баз данных»
INSERT INTO attempt (student_id, subject_id, date_attempt)
VALUES (1,2,NOW());
SELECT * FROM attempt
Query result:
+------------+------------+------------+--------------+--------+
| attempt_id | student_id | subject_id | date_attempt | result |
+------------+------------+------------+--------------+--------+
| 1          | 1          | 2          | 2020-03-23   | 67     |
| 2          | 3          | 1          | 2020-03-23   | 100    |
| 3          | 4          | 2          | 2020-03-26   | 0      |
| 4          | 1          | 1          | 2020-04-15   | 33     |
| 5          | 3          | 1          | 2020-04-15   | 67     |
| 6          | 4          | 2          | 2020-04-21   | 100    |
| 7          | 3          | 1          | 2020-05-17   | 33     |
| 8          | 1          | 2          | 2020-06-15   | None   |
+------------+------------+------------+--------------+--------+
Affected rows: 8

  3.2.3. Случайным образом выбрать три вопроса (запрос) по дисциплине...
INSERT INTO testing (attempt_id, question_id)
SELECT (SELECT attempt_id FROM attempt WHERE result IS NULL), question_id FROM question
WHERE subject_id=2
ORDER BY RAND()
LIMIT 3;
SELECT * FROM testingQuery result:
+------------+------------+-------------+-----------+
| testing_id | attempt_id | question_id | answer_id |
+------------+------------+-------------+-----------+
| 1          | 1          | 9           | 25        |
| 2          | 1          | 7           | 19        |
| 3          | 1          | 6           | 17        |
| 4          | 2          | 3           | 9         |
| 5          | 2          | 1           | 2         |
| 6          | 2          | 4           | 11        |
| 7          | 3          | 6           | 18        |
| 8          | 3          | 8           | 24        |
| 9          | 3          | 9           | 28        |
| 10         | 4          | 1           | 2         |
| 11         | 4          | 5           | 16        |
| 12         | 4          | 3           | 10        |
| 13         | 5          | 2           | 6         |
| 14         | 5          | 1           | 2         |
| 15         | 5          | 4           | 12        |
| 16         | 6          | 6           | 17        |
| 17         | 6          | 8           | 22        |
| 18         | 6          | 7           | 21        |
| 19         | 7          | 1           | 3         |
| 20         | 7          | 4           | 11        |
| 21         | 7          | 5           | 16        |
| 22         | 8          | 6           | None      |
| 23         | 8          | 9           | None      |
| 24         | 8          | 8           | None      |
+------------+------------+-------------+-----------+
Affected rows: 24

  3.2.4. Студент прошел тестирование, далее необходимо вычислить результат...
UPDATE attempt
SET result=(SELECT ROUND(sum(is_correct)/3*100,0) FROM answer
    INNER JOIN testing USING(answer_id)
        INNER JOIN question ON testing.question_id=question.question_id
WHERE attempt_id=8
GROUP BY attempt_id)
WHERE attempt_id=8;
SELECT * FROM attempt
Query result:
+------------+------------+------------+--------------+--------+
| attempt_id | student_id | subject_id | date_attempt | result |
+------------+------------+------------+--------------+--------+
| 1          | 1          | 2          | 2020-03-23   | 67     |
| 2          | 3          | 1          | 2020-03-23   | 100    |
| 3          | 4          | 2          | 2020-03-26   | 0      |
| 4          | 1          | 1          | 2020-04-15   | 33     |
| 5          | 3          | 1          | 2020-04-15   | 67     |
| 6          | 4          | 2          | 2020-04-21   | 100    |
| 7          | 3          | 1          | 2020-05-17   | 33     |
| 8          | 1          | 2          | 2020-06-12   | 67     |
+------------+------------+------------+--------------+--------+
Affected rows: 8

  3.2.5. Удалить из таблицы attempt все попытки, выполненные раньше 1 мая 2020 года...
DELETE FROM attempt
WHERE date_attempt<'2020-05-01';
SELECT * FROM attempt;
SELECT * FROM testing
Query result:
+------------+------------+------------+--------------+--------+
| attempt_id | student_id | subject_id | date_attempt | result |
+------------+------------+------------+--------------+--------+
| 7          | 3          | 1          | 2020-05-17   | 33     |
| 8          | 1          | 2          | 2020-06-12   | 67     |
+------------+------------+------------+--------------+--------+
Affected rows: 2
Query result:
+------------+------------+-------------+-----------+
| testing_id | attempt_id | question_id | answer_id |
+------------+------------+-------------+-----------+
| 19         | 7          | 1           | 3         |
| 20         | 7          | 4           | 11        |
| 21         | 7          | 5           | 16        |
| 22         | 8          | 7           | 19        |
| 23         | 8          | 6           | 17        |
| 24         | 8          | 8           | 22        |
+------------+------------+-------------+-----------+
Affected rows: 6

  3.2.6. Свободное задание
SELECT * FROM attempt;
INSERT INTO attempt (student_id, subject_id, date_attempt)
SELECT student_id, subject_id, NOW()+INTERVAL 5 DAY FROM attempt
GROUP BY student_id, subject_id
HAVING count(student_id)<3 AND AVG(result)<60;
SELECT * FROM attempt
Query result:
+------------+------------+------------+--------------+--------+
| attempt_id | student_id | subject_id | date_attempt | result |
+------------+------------+------------+--------------+--------+
| 1          | 1          | 2          | 2020-03-23   | 67     |
| 2          | 3          | 1          | 2020-03-23   | 100    |
| 3          | 4          | 2          | 2020-03-26   | 0      |
| 4          | 1          | 1          | 2020-04-15   | 33     |
| 5          | 3          | 1          | 2020-04-15   | 67     |
| 6          | 4          | 2          | 2020-04-21   | 100    |
| 7          | 3          | 1          | 2020-05-17   | 33     |
+------------+------------+------------+--------------+--------+
Affected rows: 7
Affected rows: 2
Query result:
+------------+------------+------------+--------------+--------+
| attempt_id | student_id | subject_id | date_attempt | result |
+------------+------------+------------+--------------+--------+
| 1          | 1          | 2          | 2020-03-23   | 67     |
| 2          | 3          | 1          | 2020-03-23   | 100    |
| 3          | 4          | 2          | 2020-03-26   | 0      |
| 4          | 1          | 1          | 2020-04-15   | 33     |
| 5          | 3          | 1          | 2020-04-15   | 67     |
| 6          | 4          | 2          | 2020-04-21   | 100    |
| 7          | 3          | 1          | 2020-05-17   | 33     |
| 8          | 1          | 1          | 2020-06-20   | None   |
| 9          | 4          | 2          | 2020-06-20   | None   |
+------------+------------+------------+--------------+--------+
Affected rows: 9

  3.3.2. Вывести абитуриентов, которые хотят поступать на образовательную программу «Мехатроника и робототехника»
SELECT name_enrollee FROM enrollee
    INNER JOIN program_enrollee USING (enrollee_id)
        INNER JOIN program USING (program_id)
WHERE name_program='Мехатроника и робототехника'
ORDER BY name_enrollee
Query result:
+-----------------+
| name_enrollee   |
+-----------------+
| Баранов Павел   |
| Попов Илья      |
| Семенов Иван    |
| Степанова Дарья |
+-----------------+
Affected rows: 4

  3.3.3. Вывести образовательные программы, на которые для поступления необходим предмет «Информатика».
SELECT name_program FROM subject
    INNER JOIN program_subject USING(subject_id)
        INNER JOIN program USING(program_id)
WHERE name_subject='Информатика'
Query result:
+-------------------------------------+
| name_program                        |
+-------------------------------------+
| Прикладная математика и информатика |
| Математика и компьютерные науки     |
+-------------------------------------+
Affected rows: 2

  3.3.4. Выведите количество абитуриентов, сдавших ЕГЭ по каждому предмету...
SELECT name_subject,
        count(result) AS Количество,
        max(result) AS Максимум, 
        min(result) AS Минимум, 
        ROUND(avg(result),1) AS Среднее 
FROM enrollee_subject
        INNER JOIN subject USING(subject_id)
GROUP BY name_subject
ORDER BY name_subject
Query result:
+--------------+------------+----------+---------+---------+
| name_subject | Количество | Максимум | Минимум | Среднее |
+--------------+------------+----------+---------+---------+
| Информатика  | 4          | 94       | 75      | 82.0    |
| Математика   | 6          | 92       | 67      | 75.3    |
| Русский язык | 6          | 90       | 65      | 77.5    |
| Физика       | 5          | 90       | 41      | 69.8    |
+--------------+------------+----------+---------+---------+
Affected rows: 4

  3.3.5. Вывести образовательные программы, для которых минимальный балл ЕГЭ ...
SELECT name_program FROM program_subject
    INNER JOIN program USING(program_id)
GROUP BY name_program
HAVING MIN(program_subject.min_ball)>=40
Query result:
+-------------------------------------+
| name_program                        |
+-------------------------------------+
| Мехатроника и робототехника         |
| Прикладная математика и информатика |
+-------------------------------------+
Affected rows: 2

  3.3.6. Вывести образовательные программы, которые имеют самый большой план набора,  вместе с этой величиной.
SELECT name_program, plan FROM program
WHERE plan=(SELECT MAX(plan) FROM program)
Query result:
+-----------------------------+------+
| name_program                | plan |
+-----------------------------+------+
| Мехатроника и робототехника | 3    |
+-----------------------------+------+
Affected rows: 1

  3.3.7. осчитать, сколько дополнительных баллов получит каждый студент...
SELECT name_enrollee, IFNULL(sum(add_ball),0) AS Бонус FROM achievement
inner join enrollee_achievement USING(achievement_id)
    right JOIN enrollee USING(enrollee_id)
GROUP BY name_enrollee
ORDER BY name_enrollee
Query result:
+-----------------+-------+
| name_enrollee   | Бонус |
+-----------------+-------+
| Абрамова Катя   | 0     |
| Баранов Павел   | 6     |
| Попов Илья      | 8     |
| Семенов Иван    | 5     |
| Степанова Дарья | 0     |
| Яковлева Галина | 1     |
+-----------------+-------+
Affected rows: 6

  3.3.8. Выведите сколько человек подало заявление на каждую образовательную программу...
SELECT name_department, name_program, plan, 
    count(enrollee_id) AS Количество, 
    round(count(enrollee_id)/plan,2) AS Конкурс
FROM program_enrollee 
    INNER JOIN program USING(program_id)
        INNER JOIN department USING(department_id)
GROUP BY name_department, name_program, plan
ORDER BY Конкурс DESC
Query result:
+-------------------------+-------------------------------------+------+------------+---------+
| name_department         | name_program                        | plan | Количество | Конкурс |
+-------------------------+-------------------------------------+------+------------+---------+
| Школа естественных наук | Математика и компьютерные науки     | 1    | 3          | 3.00    |
| Инженерная школа        | Прикладная механика                 | 2    | 4          | 2.00    |
| Школа естественных наук | Прикладная математика и информатика | 2    | 3          | 1.50    |
| Инженерная школа        | Мехатроника и робототехника         | 3    | 4          | 1.33    |
+-------------------------+-------------------------------------+------+------------+---------+
Affected rows: 4

  3.3.9. Вывести образовательные программы, на которые для поступления...
SELECT name_program FROM subject
    INNER JOIN program_subject USING(subject_id)
        INNER JOIN program USING(program_id)
WHERE name_subject='Информатика' OR name_subject='Математика'
GROUP BY name_program
HAVING count(name_subject)=2
Query result:
+-------------------------------------+
| name_program                        |
+-------------------------------------+
| Математика и компьютерные науки     |
| Прикладная математика и информатика |
+-------------------------------------+
Affected rows: 2

  3.3.10. Посчитать количество баллов каждого абитуриента на каждую образовательную программу...
SELECT name_program, name_enrollee, SUM(result) AS itog FROM enrollee
    INNER JOIN program_enrollee USING(enrollee_id)
        INNER JOIN program USING(program_id)
            INNER JOIN program_subject USING(program_id)
                INNER JOIN subject USING(subject_id)
                    INNER JOIN enrollee_subject ON
                        subject.subject_id = enrollee_subject.subject_id 
                        and enrollee_subject.enrollee_id = enrollee.enrollee_id
GROUP BY name_program, name_enrollee
ORDER BY name_program, itog DESC
Query result:
+-------------------------------------+-----------------+------+
| name_program                        | name_enrollee   | itog |
+-------------------------------------+-----------------+------+
| Математика и компьютерные науки     | Степанова Дарья | 276  |
| Математика и компьютерные науки     | Семенов Иван    | 230  |
| Математика и компьютерные науки     | Абрамова Катя   | 226  |
| Мехатроника и робототехника         | Степанова Дарья | 270  |
| Мехатроника и робототехника         | Семенов Иван    | 242  |
| Мехатроника и робототехника         | Попов Илья      | 192  |
| Мехатроника и робототехника         | Баранов Павел   | 179  |
| Прикладная математика и информатика | Семенов Иван    | 230  |
| Прикладная математика и информатика | Абрамова Катя   | 226  |
| Прикладная математика и информатика | Баранов Павел   | 213  |
| Прикладная механика                 | Степанова Дарья | 270  |
| Прикладная механика                 | Яковлева Галина | 238  |
| Прикладная механика                 | Попов Илья      | 192  |
| Прикладная механика                 | Баранов Павел   | 179  |
+-------------------------------------+-----------------+------+
Affected rows: 14

  3.3.11. Вывести название образовательной программы и фамилию тех абитуриентов...
SELECT name_program, name_enrollee FROM enrollee
    INNER JOIN program_enrollee USING(enrollee_id)
        INNER JOIN program USING(program_id)
            INNER JOIN program_subject USING(program_id)
                INNER JOIN subject USING(subject_id)
                    INNER JOIN enrollee_subject ON
                        subject.subject_id = enrollee_subject.subject_id 
                        and enrollee_subject.enrollee_id = enrollee.enrollee_id
WHERE result<min_ball
GROUP BY name_program, name_enrollee
ORDER BY name_program
Query result:
+-----------------------------+---------------+
| name_program                | name_enrollee |
+-----------------------------+---------------+
| Мехатроника и робототехника | Баранов Павел |
| Прикладная механика         | Баранов Павел |
+-----------------------------+---------------+
Affected rows: 2

  3.3.12. Свободное задание
SELECT name_program, name_enrollee, 
        IFNULL(add_ball,0) as Bonus, 
        SUM(result) AS total_score
FROM achievement 
INNER JOIN enrollee_achievement USING(achievement_id)
RIGHT JOIN enrollee USING(enrollee_id)
    INNER JOIN program_enrollee USING(enrollee_id)
        INNER JOIN program USING(program_id)
            INNER JOIN program_subject USING(program_id)
                INNER JOIN subject USING(subject_id)
                    INNER JOIN enrollee_subject ON
                        subject.subject_id = enrollee_subject.subject_id 
                        and enrollee_subject.enrollee_id = enrollee.enrollee_id
GROUP BY name_program, name_enrollee, Bonus
Query result:
+-------------------------------------+-----------------+-------+-------------+
| name_program                        | name_enrollee   | Bonus | total_score |
+-------------------------------------+-----------------+-------+-------------+
| Математика и компьютерные науки     | Абрамова Катя   | 0     | 226         |
| Математика и компьютерные науки     | Семенов Иван    | 0     | 230         |
| Математика и компьютерные науки     | Степанова Дарья | 0     | 276         |
| Мехатроника и робототехника         | Баранов Павел   | 3     | 358         |
| Мехатроника и робототехника         | Попов Илья      | 3     | 192         |
| Мехатроника и робототехника         | Попов Илья      | 5     | 192         |
| Мехатроника и робототехника         | Семенов Иван    | 5     | 242         |
| Мехатроника и робототехника         | Степанова Дарья | 0     | 270         |
| Прикладная математика и информатика | Абрамова Катя   | 0     | 226         |
| Прикладная математика и информатика | Баранов Павел   | 3     | 426         |
| Прикладная математика и информатика | Семенов Иван    | 5     | 230         |
| Прикладная механика                 | Баранов Павел   | 3     | 358         |
| Прикладная механика                 | Попов Илья      | 3     | 192         |
| Прикладная механика                 | Попов Илья      | 5     | 192         |
| Прикладная механика                 | Степанова Дарья | 0     | 270         |
| Прикладная механика                 | Яковлева Галина | 1     | 238         |
+-------------------------------------+-----------------+-------+-------------+
Affected rows: 16

  3.4.2. Создать вспомогательную таблицу applicant,  куда включить id образовательной программы...
CREATE TABLE applicant 
SELECT program_id, enrollee.enrollee_id, SUM(result) AS itog FROM enrollee
    INNER JOIN program_enrollee USING(enrollee_id)
        INNER JOIN program USING(program_id)
            INNER JOIN program_subject USING(program_id)
                INNER JOIN subject USING(subject_id)
                    INNER JOIN enrollee_subject ON
                        subject.subject_id = enrollee_subject.subject_id 
                        and enrollee_subject.enrollee_id = enrollee.enrollee_id
GROUP BY program_id, enrollee.enrollee_id
ORDER BY program_id, itog DESC;
SELECT * FROM applicant;
Query result:
+------------+-------------+------+
| program_id | enrollee_id | itog |
+------------+-------------+------+
| 1          | 3           | 230  |
| 1          | 2           | 226  |
| 1          | 1           | 213  |
| 2          | 6           | 276  |
| 2          | 3           | 230  |
| 2          | 2           | 226  |
| 3          | 6           | 270  |
| 3          | 4           | 238  |
| 3          | 5           | 192  |
| 3          | 1           | 179  |
| 4          | 6           | 270  |
| 4          | 3           | 242  |
| 4          | 5           | 192  |
| 4          | 1           | 179  |
+------------+-------------+------+
Affected rows: 14

  3.4.3. Удалить из таблицы applicant записи , если абитуриент...
DELETE FROM applicant
USING applicant INNER JOIN
(SELECT program_id, enrollee.enrollee_id FROM enrollee
    INNER JOIN program_enrollee USING(enrollee_id)
        INNER JOIN program USING(program_id)
            INNER JOIN program_subject USING(program_id)
                INNER JOIN subject USING(subject_id)
                    INNER JOIN enrollee_subject ON
                        subject.subject_id = enrollee_subject.subject_id 
                        and enrollee_subject.enrollee_id = enrollee.enrollee_id
WHERE result<min_ball) pr
     ON applicant.program_id=pr.program_id AND 
        applicant.enrollee_id=pr.enrollee_id;
SELECT * FROM applicant;
Query result:
+------------+-------------+------+
| program_id | enrollee_id | itog |
+------------+-------------+------+
| 1          | 3           | 230  |
| 1          | 2           | 226  |
| 1          | 1           | 213  |
| 2          | 6           | 276  |
| 2          | 3           | 230  |
| 2          | 2           | 226  |
| 3          | 6           | 270  |
| 3          | 4           | 238  |
| 3          | 5           | 192  |
| 4          | 6           | 270  |
| 4          | 3           | 242  |
| 4          | 5           | 192  |
+------------+-------------+------+
Affected rows: 12

  3.4.4. овысить итоговые баллы абитуриентов в таблице applicant на значения...
UPDATE applicant 
AS applicant 
    INNER JOIN (SELECT enrollee_id, IFNULL(sum(add_ball),0) AS bonus FROM achievement
                    inner join enrollee_achievement USING(achievement_id)
                        right JOIN enrollee USING(enrollee_id)
                            GROUP BY enrollee_id) AS bon USING(enrollee_id)
SET itog=itog+bon.bonus;
SELECT * FROM applicant
Query result:
+------------+-------------+------+
| program_id | enrollee_id | itog |
+------------+-------------+------+
| 1          | 3           | 235  |
| 1          | 2           | 226  |
| 1          | 1           | 219  |
| 2          | 6           | 276  |
| 2          | 3           | 235  |
| 2          | 2           | 226  |
| 3          | 6           | 270  |
| 3          | 4           | 239  |
| 3          | 5           | 200  |
| 4          | 6           | 270  |
| 4          | 3           | 247  |
| 4          | 5           | 200  |
+------------+-------------+------+
Affected rows: 12

  3.4.5. Поскольку при добавлении дополнительных баллов, абитуриенты по каждой образовательной...
CREATE TABLE applicant_order
SELECT * FROM applicant
ORDER BY program_id, itog DESC;
DROP TABLE applicant;
SELECT * FROM applicant_order
Query result:
+------------+-------------+------+
| program_id | enrollee_id | itog |
+------------+-------------+------+
| 1          | 3           | 235  |
| 1          | 2           | 226  |
| 1          | 1           | 219  |
| 2          | 6           | 276  |
| 2          | 3           | 235  |
| 2          | 2           | 226  |
| 3          | 6           | 270  |
| 3          | 4           | 239  |
| 3          | 5           | 200  |
| 4          | 6           | 270  |
| 4          | 3           | 247  |
| 4          | 5           | 200  |
+------------+-------------+------+
Affected rows: 12

  3.4.6. В таблицу applicant_order для пояснения включены столбцы «План набора» и «Результат»
ALTER TABLE applicant_order ADD str_id INT FIRST;
SELECT * FROM applicant_order
Query result:
+--------+------------+-------------+------+
| str_id | program_id | enrollee_id | itog |
+--------+------------+-------------+------+
| None   | 1          | 3           | 235  |
| None   | 1          | 2           | 226  |
| None   | 1          | 1           | 219  |
| None   | 2          | 6           | 276  |
| None   | 2          | 3           | 235  |
| None   | 2          | 2           | 226  |
| None   | 3          | 6           | 270  |
| None   | 3          | 4           | 239  |
| None   | 3          | 5           | 200  |
| None   | 4          | 6           | 270  |
| None   | 4          | 3           | 247  |
| None   | 4          | 5           | 200  |
+--------+------------+-------------+------+
Affected rows: 12

  3.4.7. Номер строки в таблице или запросе в некоторых версиях SQL можно получить с помощью функции  row_number()...
SET @num_pr = 0;
SET @row_num = 1;
UPDATE applicant_order
    AS applicant_order INNER JOIN
        (SELECT *,if(program_id = @num_pr, @row_num := @row_num + 1, @row_num := 1) AS str_num,
                 @num_pr := program_id AS add_var 
                    FROM applicant_order) as tab2 
                    ON applicant_order.program_id=tab2.add_var
                    AND applicant_order.enrollee_id=tab2.enrollee_id
SET applicant_order.str_id=tab2.str_num;
SELECT * FROM applicant_order;
Query result:
+--------+------------+-------------+------+
| str_id | program_id | enrollee_id | itog |
+--------+------------+-------------+------+
| 1      | 1          | 3           | 235  |
| 2      | 1          | 2           | 226  |
| 3      | 1          | 1           | 219  |
| 1      | 2          | 6           | 276  |
| 2      | 2          | 3           | 235  |
| 3      | 2          | 2           | 226  |
| 1      | 3          | 6           | 270  |
| 2      | 3          | 4           | 239  |
| 3      | 3          | 5           | 200  |
| 1      | 4          | 6           | 270  |
| 2      | 4          | 3           | 247  |
| 3      | 4          | 5           | 200  |
+--------+------------+-------------+------+
Affected rows: 12

  3.4.8. Создать таблицу student,  в которую включить абитуриентов...
CREATE TABLE student
SELECT name_program, name_enrollee, itog FROM enrollee
    INNER JOIN applicant_order USING(enrollee_id)
        INNER JOIN program USING(program_id)
WHERE str_id<=plan;
SELECT * FROM student
Query result:
+-------------------------------------+-----------------+------+
| name_program                        | name_enrollee   | itog |
+-------------------------------------+-----------------+------+
| Прикладная математика и информатика | Семенов Иван    | 235  |
| Прикладная математика и информатика | Абрамова Катя   | 226  |
| Математика и компьютерные науки     | Степанова Дарья | 276  |
| Прикладная механика                 | Степанова Дарья | 270  |
| Прикладная механика                 | Яковлева Галина | 239  |
| Мехатроника и робототехника         | Степанова Дарья | 270  |
| Мехатроника и робототехника         | Семенов Иван    | 247  |
| Мехатроника и робототехника         | Попов Илья      | 200  |
+-------------------------------------+-----------------+------+
Affected rows: 8

  3.4.9. Свободное задание
SELECT str_id, name_program, name_enrollee, itog, plan, 
IF (plan<str_id, 'в ожидании','поступил') AS ent
FROM enrollee
    INNER JOIN applicant_order USING(enrollee_id)
        INNER JOIN program USING(program_id)
WHERE str_id-plan<3  -- '1'-for entered; '3' - for ALL
Query result:
+--------+-------------------------------------+-----------------+------+------+------------+
| str_id | name_program                        | name_enrollee   | itog | plan | ent        |
+--------+-------------------------------------+-----------------+------+------+------------+
| 1      | Прикладная математика и информатика | Семенов Иван    | 235  | 2    | поступил   |
| 2      | Прикладная математика и информатика | Абрамова Катя   | 226  | 2    | поступил   |
| 3      | Прикладная математика и информатика | Баранов Павел   | 219  | 2    | в ожидании |
| 1      | Математика и компьютерные науки     | Степанова Дарья | 276  | 1    | поступил   |
| 2      | Математика и компьютерные науки     | Семенов Иван    | 235  | 1    | в ожидании |
| 3      | Математика и компьютерные науки     | Абрамова Катя   | 226  | 1    | в ожидании |
| 1      | Прикладная механика                 | Степанова Дарья | 270  | 2    | поступил   |
| 2      | Прикладная механика                 | Яковлева Галина | 239  | 2    | поступил   |
| 3      | Прикладная механика                 | Попов Илья      | 200  | 2    | в ожидании |
| 1      | Мехатроника и робототехника         | Степанова Дарья | 270  | 3    | поступил   |
| 2      | Мехатроника и робототехника         | Семенов Иван    | 247  | 3    | поступил   |
| 3      | Мехатроника и робототехника         | Попов Илья      | 200  | 3    | поступил   |
+--------+-------------------------------------+-----------------+------+------+------------+
Affected rows: 12

